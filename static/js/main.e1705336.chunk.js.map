{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getVersionData","asyncToGenerator","regenerator_default","a","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","abrupt","stop","getCarsData","_callee2","_context2","state","version","cars","_this2","then","res","setState","catch","err","console","log","push","make","model","year","rating","render","versionText","carsDisplay","rowColStyles","border-collapse","border","react_default","createElement","map","car","style","className","height","src","logo","alt","width","margin","type","margin-bottom","onclick","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e1705336.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      version: null,\n      cars: null\n    }\n  }\n  \n  componentDidMount() {\n    this.getVersionData()\n      .then(res => this.setState({ version: res.version }))\n      .catch(err => console.log(err));\n\n      this.getCarsData()\n        .then(res => this.setState({ cars: res.cars }))\n        .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  getVersionData = async() => {\n    const response = await fetch('https://tranquil-caverns-41069.herokuapp.com/version');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body) \n    }\n    return body;\n  };\n\n  getCarsData = async() => {\n    const response = await fetch('https://tranquil-caverns-41069.herokuapp.com/cars');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body) \n    }\n    return body;\n  };\n\n  getPostData() {\n    this.setState({cars: this.state.cars.push({\n      make: \"\",\n      model: \"\",\n      year: \"\",\n      rating: \"\"\n    })});\n    \n    this.render();\n  }\n\n  getDeleteData(){\n\n  }\n\n  getPutData() {\n\n  }\n\n  render() {\n\n    var versionText;\n    if (this.state.version == null) {\n      versionText = \"Loading ...\";\n    } else {\n      versionText = this.state.version;\n    }\n\n    const tableStyles = {\n      \"width\": \"80%\",\n      \"border-collapse\": \"collapse\",\n      \"border\": \"1px solid #dddddd\",\n      \"margin\": \"1em auto\"\n    }\n\n    const rowColStyles = {\n      \"border-collapse\": \"collapse\",\n      \"border\": \"1px solid #dddddd\"\n    }\n\n    var carsDisplay;\n    if (this.state.cars == null) {\n      carsDisplay = <p>\"Loading ...\"</p>;\n    } else {\n      carsDisplay = this.state.cars.map((car) => (\n        <tr style={rowColStyles}>\n          <td>{car.make}</td>\n          <td>{car.model}</td>\n          <td>{car.year}</td>\n          <td>{car.rating}</td>\n        </tr>\n      ));\n    }\n\n    //Look up html forms for getting data about requests\n\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\" style={{\"height\":\"50%\"}}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n          <p>{versionText}</p>\n        </header>\n\n        <table style={tableStyles}>\n          <tr style={rowColStyles}>\n            <th>Make</th>\n            <th>Model</th>\n            <th>Year</th>\n            <th>Rating</th>\n          </tr>\n          {carsDisplay}\n        </table>\n\n        <button type=\"button\" style={{\"margin-bottom\":\"1em\"}} onclick=\"getPostData()\">POST</button>\n        <button type=\"button\" style={{\"margin-bottom\":\"1em\"}} onclick=\"getPutData()\">PUT</button>\n        <button type=\"button\" style={{\"margin-bottom\":\"1em\"}} onclick=\"getDeleteData()\">DELETE</button>\n        <button type=\"button\" style={{\"margin-bottom\":\"1em\"}} onclick=\"getPostData()\">SUMBIT</button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}